{{>licenseInfo}}
import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/switchMap';

import * as Models from './model/models';
import { Configuration } from './configuration';
import { ApiAction } from '@app/state/ApiAction';

import { Action } from '@ngrx/store';
import { Effect, Actions, ofType } from '@ngrx/effects';
import { ToastrService } from 'ngx-toastr';

import * as ACTIONS from "./actions";
import { RequestMethod } from "@api/RequestMethod";
import { environment } from '@env/environment';

{{#operations}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
export class {{classname}}Effects {
    protected domain = environment.apiUrl;
    public headers: HttpHeaders = new HttpHeaders();

    constructor(
      private actions$: Actions,
      private http: HttpClient,
      private toastr: ToastrService,
      @Optional() @Inject('headers') headers: HttpHeaders

    ) {
      if (headers) {
        this.headers = headers;
      }
    }

{{#operation}}

    /***
     * Listens to {{#fnSnakeCase}}{{nickname}}{{/fnSnakeCase}} actions and acts accordingly
     * {{httpMethod}} URI: {{{path}}}
     *
     * @property { Observable<Action> } {{nickname}}$
     */
    @Effect() {{nickname}}$: Observable<Action> = this.actions$
      .ofType(ACTIONS.{{#fnSnakeCase}}{{nickname}}{{/fnSnakeCase}})
      .switchMap( this.handle{{#fnCapitalize}}{{nickname}}{{/fnCapitalize}}.bind(this) );
{{/operation}}

{{#operation}}

    /***
     * {{summary}}
     * {{notes}}
     */
    private handle{{#fnCapitalize}}{{nickname}}{{/fnCapitalize}}( action: ApiAction ) {
      {{#hasParams}}const { {{#allParams}}{{#required}}{{{paramName}}}{{^-last}},{{/-last}}{{/required}} {{/allParams}} } = action.params;{{/hasParams}}
    return this.http.request({{httpMethod}}, `${this.domain}{{{path}}}`, { {{#bodyParam}}body: {{paramName}},{{/bodyParam}}{{^bodyParam}}params: action.httpParams,{{/bodyParam}} observe: 'response' })
        .map((res: { body: any }) => (
          { type: ACTIONS.{{#fnSnakeCase}}{{nickname}}{{/fnSnakeCase}}_SUCCESS, data: res.body, requestContext: { {{#hasParams}}{{#allParams}}{{#required}} {{{paramName}}}{{^-last}},{{/-last}} {{/required}}{{/allParams}}{{/hasParams}} } }
        ))
        .catch((e) => {
            this.toastr.error('Connection error', '{{nickname}} failed');
            return Observable.of({ type: ACTIONS.{{#fnSnakeCase}}{{nickname}}{{/fnSnakeCase}}_ERROR, error: e });
        });
    }
{{/operation}}

}
{{/operations}}

