swagger: '2.0'
info:
  description: This is the Transaction Manager server reponsible for creating and retrieving accounts for customer and carrying out instructions for double entries.
  version: V1
  title: Transaction Manager
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# host: transaction.manager.swagger.io
# basePath: /v2
tags:
  - name: account
    description: Operations about related to accounts
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
# schemes:
#   - http

paths:
  '/customers/{customerId}/accounts':
    post:
      tags:
        - accounts
      summary: Creates a new account for the given customer
      description: ''
      operationId: createAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: a friendly name that uniquely identifies this account
          required: true
          type: string
          x-encrypted-id: true
        - name: name
          in: query
          description: a friendly name that uniquely identifies this account
          required: true
          type: string
        - name: currency
          in: query
          maxLength: 3
          description: 'a valid 3-letter ISO code identifying the currency to use eg EUR, TRY'
          required: true
          type: string
      responses:
        '201':
          description: Created. Link in location header
        '400':
          description: Invalid eg bad currency code
        '401':
          description: Access denied
        '409':
          description: Conflict. An account with the same name already exists for this customer
    get:
      tags:
        - accounts
      summary: Get list of accounts
      description: ''
      operationId: getAccounts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
      responses:
        '200':
          description: 'OK, list being returned'
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
        '400':
          description: Bad request
        '401':
          description: Access denied
        '403':
          description: Unauth
        '404':
          description: Account not found
  '/customers/{customerId}/accounts/{accountId}':
    get:
      tags:
        - accounts
      summary: Get account by accountId
      description: ''
      operationId: getAccountByAccountId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: accountId
          in: path
          description: ID of account
          required: true
          type: string
          x-encrypted-id: true
      responses:
        '200':
          description: 'OK, account being returned'
          schema:
            $ref: '#/definitions/Account'
        '400':
          description: Bad request
        '401':
          description: Access denied
        '403':
          description: Unauth
        '404':
          description: Account not found
  '/customers/{customerId}/accounts/{accountId}/entries':
    get:
      tags:
        - accounts
      summary: Get accounting entries by accountId
      description: ''
      operationId: getAccountingEntriesByAccountId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: accountId
          in: path
          description: ID of account
          required: true
          type: string
          x-encrypted-id: true
      responses:
        '200':
          description: 'OK, list being returned'
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountingEntry'
        '401':
          description: Access denied
        '404':
          description: Not found (does not match filter criteria)
  '/customers/{customerId}/accounts/{accountId}/entries/{entryId}':
    get:
      tags:
        - accounts
      summary: Get accounting entry by entryId
      description: ''
      operationId: getAccountingEntryByEntryId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: accountId
          in: path
          description: ID of account
          required: true
          type: string
          x-encrypted-id: true
        - name: entryId
          in: path
          description: ID of entry
          required: true
          type: string
          x-encrypted-id: true
      responses:
        '200':
          description: 'OK, list being returned'
          schema:
            $ref: '#/definitions/AccountingEntry'
        '401':
          description: Access denied
        '404':
          description: Not found (does not match filter criteria)
  '/customers/{customerId}/instructions/commissions':
    post:
      tags:
        - instructions
      summary: Simulate instruction
      description: ''
      operationId: calculateCommissions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: instructionRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/InstructionRequest'
      responses:
        '201':
          description: Instruction created
        '400':
          description: Bad request
        '401':
          description: Access denied
        '403':
          description: Not authorized to access this endpoint
  '/customers/{customerId}/instructions':
    post:
      tags:
        - instructions
      summary: Create new instruction
      description: ''
      operationId: createNewInstruction
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: instructionRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/InstructionRequest'
      responses:
        '201':
          description: Instruction created
        '400':
          description: Bad request
        '401':
          description: Access denied
        '403':
          description: Not authorized to access this endpoint
    get:
      tags:
        - instructions
      summary: Get Instructions
      description: ''
      operationId: getInstructions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: instructionType
          in: query
          description: Type of instruction
          required: true
          type: string
          enum:
            - deposit
            - refund
            - payment
            - payout
            - transfer
            - exchange
            - withdraw
        - in: query
          name: currency
          type: string
          description: 3 letter currency code
        - in: query
          name: amount
          type: integer
      responses:
        '200':
          description: 'OK, data is being returned'
          schema:
            type: array
            items:
              $ref: '#/definitions/Instruction'
        '401':
          description: Access denied
        '404':
          description: Instruction not found
  '/customers/{customerId}/instructions/{instructionId}':
    get:
      tags:
        - instructions
      summary: Get Instruction by instructionId
      description: ''
      operationId: getInstructionByInstructionId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          x-encrypted-id: true
          type: string
        - name: instructionId
          in: path
          x-encrypted-id: true
          description: ID of instruction
          required: true
          type: string
      responses:
        '200':
          description: 'OK, data is being returned'
          schema:
            $ref: '#/definitions/Instruction'
        '401':
          description: Access denied
        '404':
          description: Instruction not found
    put:
      tags:
        - instructions
      summary: Approve Instruction
      description: ''
      operationId: approveInstruction
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          type: string
          x-encrypted-id: true
        - name: instructionId
          in: path
          x-encrypted-id: true
          description: ID of instruction
          required: true
          type: string
        - name: approvalReason
          in: query
          description: Reason for approval Enum
          required: true
          type: string
          enum:
            - approve
            - to_be_defined
      responses:
        '200':
          description: 'Ok, marked as approved'
        '401':
          description: Access denied
        '404':
          description: Instruction Not found
        '409':
          description: 'Conflict, instruction processed already, cannot approve'
    delete:
      tags:
        - instructions
      summary: Cancel Instruction
      description: ''
      operationId: cancelInstruction
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of customer
          required: true
          x-encrypted-id: true
          type: string
        - name: instructionId
          in: path
          description: ID of instruction
          x-encrypted-id: true
          required: true
          type: string
        - name: cancellationReason
          in: query
          description: Reason for cancellation Enum
          required: true
          type: string
          enum:
            - cancel
            - to_be_defined
      responses:
        '200':
          description: 'Ok, marked as deleted'
        '401':
          description: Access denied
        '404':
          description: Instruction Not found
        '409':
          description: 'Instruction processed already, cannot cancel'
definitions:
  Account:
    type: object
    properties:
      id:
        $ref: '#/definitions/EntityId'
      name:
        type: string
        description: A friendly name of this account
      createdOn:
        type: string
        format: date-time
        description: '2017-04-01 00:00    // https://en.wikipedia.org/wiki/ISO_8601 format'
      actualBalance:
        type: number
        description: '100'
      currency:
        type: string
        maxLength: 3
        description: 3-letter currency symbol
      accountNumber:
        type: string
        maxLength: 16
        description: 1234567 -  human friendly account number  - 16 digits

  AccountingEntry:
    type: object
    properties:
      id:
        $ref: '#/definitions/EntityId'
      timestamp:
        type: string
        format: date-time
        description: '2017-01-01 00:00:00.00, // when this entry was created  in https://en.wikipedia.org/wiki/ISO_8601 format'
      description:
        type: string
        description: 'description of this entry, this is usually created automatically'
      amount:
        type: number
        description: 123.00 amount
      runningBalance:
        type: number
        description: 400 at end of entry
  Endpoint:
    type: object
    properties:
      id:
        $ref: '#/definitions/EntityId'
      type:
        type: string
        description: Endpoint types
        enum:
          - card
          - account
          - bank
          - voucher
  InstructionRequest:
    type: object
    properties:
      instructionType:
          description: Type of instruction
          type: string
          enum:
            - deposit
            - refund
            - payment
            - payout
            - transfer
            - exchange
            - withdraw
      sourceEndpoint:
        $ref: '#/definitions/Endpoint'
      destinationEndpoint:
        $ref: '#/definitions/Endpoint'
      amount:
        type: number
        description: example 123
      currency:
        type: string
        maxLength: 3
      instructionReference:
        $ref: '#/definitions/EntityId'
      additionalParams:
        type: object
        additionalProperties:
          type: object
        description: json map of any customer-defined parameters to be stored without further action on our part
  Instruction:
    type: object
    properties:
      id:
        $ref: '#/definitions/EntityId'
      status:
        type: string
        enum:
          - pending
          - in_progress
          - completed
          - cancelled
          - rejected
          - held
      createdOn:
        type: string
        format: date-time
        description: 'date in https://en.wikipedia.org/wiki/ISO_8601 format'
      submittedBy:
        type: string
        description: link to legal entity ID
      actionedOn:
        type: string
        format: date-time
        description: 'date in https://en.wikipedia.org/wiki/ISO_8601 format - timestamp when we changed the state'
      rejectionReason:
        type: string
        description: 'if rejected, a description of why this happened here'
  EntityId:
    type: object


externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# basePath: /eft-friends/friends-transaction-handler/V1
schemes:
 - https
 - http
# Added by API Auto Mocking Plugin
basePath: /EFTSoft/friends-transaction-handler/V1


